#ifndef PROBLEM_12_H
#define PROBLEM_12_H

#include <cmath>

//The sequence of triangle numbers is generated by adding the natural numbers.
//So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//Let us list the factors of the first seven triangle numbers:
//     1: 1
//     3: 1,3
//     6: 1,2,3,6
//    10: 1,2,5,10
//    15: 1,3,5,15
//    21: 1,3,7,21
//    28: 1,2,4,7,14,28
//We can see that 28 is the first triangle number to have over five divisors.
//What is the value of the first triangle number to have over five hundred divisors?


namespace problem12 {

    int getNumberOfDivisors(int x) {
        int root = sqrt(x);
        int divisors = 0;
        for (int i = 1; i <= root; i++) {
            if (x % i == 0) {
                divisors += 2;
            }
        }
        //If perfect square, we only want one divisor added
        if (pow(root, 2) == x)
            divisors--;

        return divisors;
    }


    int getFirstTriangleNumberWithGreaterThanNDivisors(int n) {
        int triangleNumber = 0;
        int counter = 1;
        while (true) {
            triangleNumber += counter;
            if (getNumberOfDivisors(triangleNumber) > n) {
                return triangleNumber;
            }
            counter++;
        }
        return -1;
    }

    int getAnswer() {
        return getFirstTriangleNumberWithGreaterThanNDivisors(500);
    }

}


#endif
